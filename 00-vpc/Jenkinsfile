pipeline {
    agent {
        label 'AGENT-1'
    }
    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    parameters {
    
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'select terraform action')
    }
    stages {                               
        stage('Init and Plan') {
             steps {
                withAWS(region: 'us-east-1', credentials: 'aws-credentials') {
                    sh '''
                    cd 00-vpc
                    terraform init -reconfigure
                    terraform plan -out=tfplan
                    '''
                }
            } 
        }
    
        stage('Apply or Destroy') {
            input {
                message "Do you want to ${params.ACTION} the infrastructure?"
                ok 'Yes'
            }
          
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-credentials') {

                    script {
                        def command = params.ACTION == 'apply' 
                        ? 'terraform apply -auto-approve tfplan' 
                        : 'terraform destroy -auto-approve'

                        sh """
                            cd 00-vpc
                            echo 'Executing ${params.ACTION} operation'
                            ${command}
                        """
                    }
                }
            } 
        }  
        
    }
       

    post {
        always {
            echo 'This will always run'     
            deleteDir()
        }
        success {
            echo 'This will run only if the pipeline is successful'
        }
        failure {
            echo 'This will run only if the pipeline fails'
        }
        unstable {
            echo 'This will run only if the pipeline is unstable'
        }
    }
}