pipeline {
    agent {
        label 'AGENT-1'
    }

    options {
        timeout(time: 40, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }

    parameters {
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Select Terraform action')
    }

    stages {
        stage('Init') {
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-credentials') {
                    sh """
                        cd 40-eks
                        terraform init -reconfigure
                    """
                }
            }
        }

        stage('Plan or Destroy Plan') {
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-credentials') {
                    sh """
                        cd 40-eks
                        if [ "${params.ACTION}" == "apply" ]; then
                            terraform plan -out=tfplan
                        elif [ "${params.ACTION}" == "destroy" ]; then
                            terraform plan -destroy -out=tfplan
                        fi
                    """
                }
            }
        }

        stage('Apply or Destroy') {
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-credentials') {
                    sh """
                        cd 40-eks
                        if [ "${params.ACTION}" == "apply" ]; then
                            terraform apply -auto-approve tfplan
                        elif [ "${params.ACTION}" == "destroy" ]; then
                            terraform apply -auto-approve tfplan
                        fi
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'üì¶ Cleanup running...'
            deleteDir()
        }
        success {
            echo '‚úÖ Pipeline succeeded.'
        }
        failure {
            echo '‚ùå Pipeline failed.'
        }
        unstable {
            echo '‚ö†Ô∏è Pipeline is unstable.'
        }
    }
}
