pipeline {
    agent {
        label 'AGENT-1'
    }
    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    parameters {
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Select Terraform action')
    }
    stages {
        stage('Init and Plan - ingress alb') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-credentials') {
                    sh '''
                        cd 70-ingress-alb
                        terraform init -reconfigure
                        terraform plan -out=tfplan
                    '''
                }
            }
        }

        stage('Apply - ingress alb') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-credentials') {
                    sh '''
                        cd 70-ingress-alb
                        terraform apply -auto-approve
                    '''
                }
            }
        }

        stage('Destroy Infra - below ALB') {
            when {
                expression { params.ACTION == 'destroy' }
            }
            steps {
                script {
                    withAWS(region: 'us-east-1', credentials: 'aws-credentials') {
                        def modulesToDestroy = [
                            "60-acm",
                            "50-ecr",
                            "40-eks",
                            "40-rds",
                            "20-bastion",
                            "10-sg",
                            "00-vpc"
                        ]
                        for (item in modulesToDestroy) {
                            sh """
                                cd ${item}
                                terraform init -reconfigure
                                terraform destroy -auto-approve
                            """
                            echo " Destroyed infra in ${item}"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning workspace...'
            deleteDir()
        }
        success {
            echo ' Pipeline executed successfully'
        }
        failure {
            echo ' Pipeline failed'
        }
        unstable {
            echo ' Pipeline is unstable'
        }
    }
}
