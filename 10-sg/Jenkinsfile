pipeline {
    agent {
        label 'AGENT-1'
    }
    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    parameters {
    
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'select terraform action')
    }
    stages {                               
        stage('Init and Plan') {
             steps {
                withAWS(region: 'us-east-1', credentials: 'aws-credentials') {
                    sh '''
                    cd 10-sg
                    terraform init -reconfigure
                    terraform plan -out=tfplan
                    '''
                }
            } 
        }
    
        stage('Apply') {
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-credentials') {                 
                    sh """
                        cd 10-sg
                        terraform apply -auto-approve
                    """ 
                }
            } 
        } 
        
        stage('Parallel In Sequential') {
            when {
                expression { params.ACTION == 'apply' }
            }
            parallel {
                stage('20-bastion') {
                    steps {
                        build job: '20-bastion', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
                 stage('40-rds') {
                    steps {
                        build job: '40-rds', parameters: [string(name: 'ACTION', value: 'apply')], wait: false
                    }
                }
                stage('40-eks') {
                    steps {
                        build job: '40-eks', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
                stage('50-ecr') {
                    steps {
                        build job: '50-ecr', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
            }
        }
        
        // stage('Sequential') {
        //     environment {
        //         FOR_SEQUENTIAL = "some-value"
        //     }
        //     stages {
        //         stage('In Sequential 1') {
        //             steps {
        //                 echo "In Sequential 1"
        //             }
        //         }
        //         stage('In Sequential 2') {
        //             steps {
        //                 echo "In Sequential 2"
        //             }
                
        //         }
        //     }
        // } 
        
    }
       

    post {
        always {
            echo 'This will always run'     
            deleteDir()
        }
        success {
            echo 'This will run only if the pipeline is successful'
        }
        failure {
            echo 'This will run only if the pipeline fails'
        }
        unstable {
            echo 'This will run only if the pipeline is unstable'
        }
    }
}