pipeline {
    agent {
        label 'AGENT-1'
    }
    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    parameters {
    
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'select terraform action')
    }
    stages {                               
        stage('Init and Plan') {
             steps {
                withAWS(region: 'us-east-1', credentials: 'aws-credentials') {
                    sh '''
                    cd 10-sg
                    terraform init -reconfigure
                    terraform plan -out=tfplan
                    '''
                }
            } 
        }
    
        stage('Apply or Destroy') {
            /* input {
                message "Should we continue to ${params.ACTION}"
                ok "Yes, we should."
            } */
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-credentials') {
                    sh """
                        cd 10-sg
                        if [ ${params.ACTION} == 'apply' ]
                        then
                            terraform apply -auto-approve tfplan
                        elif [ ${params.ACTION} == 'destroy' ]
                        then
                            terraform destroy -auto-approve
                        fi
                    """
                }
            }
        stage ('Destroy VPC') {
            when {
                expression { params.ACTION == 'destroy' }
            }
            steps{
                build job: '00-vpc', parameters: [string(name: 'ACTION', value: "destroy")], wait: false
            }
        }
        
        stage('Parallel-1') {
            when {
                expression { params.ACTION == 'apply' }
            }
            parallel {
                stage('20-bastion') {
                    steps {
                        build job: '20-bastion', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
                 stage('40-rds') {
                    steps {
                        build job: '40-rds', parameters: [string(name: 'ACTION', value: 'apply')], wait: false
                    }
                }
                stage('40-eks') {
                    steps {
                        build job: '40-eks', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
                stage('50-ecr') {
                    steps {
                        build job: '50-ecr', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
               
            }
        }
        stage('sequential') {
            when {
                expression { params.ACTION == 'apply' }
            }
            stages {
                stage('60-acm') {
                    steps {
                        build job: '60-acm', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
                 stage('70-ingress-alb') {
                    steps {
                        build job: '70-ingress-alb', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
                stage('80-cdn') {
                    steps {
                        build job: '80-cdn', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
            }
        }
         
        
    }
       

    post {
        always {
            echo 'This will always run'     
            deleteDir()
        }
        success {
            echo 'This will run only if the pipeline is successful'
        }
        failure {
            echo 'This will run only if the pipeline fails'
        }
        unstable {
            echo 'This will run only if the pipeline is unstable'
        }
    }
}