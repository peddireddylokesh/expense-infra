pipeline {
    agent {
        label 'AGENT-1'
    }
    options {
        timeout(time: 40, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    parameters {
    
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'select terraform action')
    }
    environment {
        TF_DIR = "${WORKSPACE}/70-ecr"
    }
    stages {
        stage('Init and Plan') {
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-credentials') {
                    dir("${env.TF_DIR}") {
                        sh '''
                            echo "ðŸ”§ Running terraform init..."
                            terraform init -reconfigure
                        '''
                    }
                }
            }
        }
    
        stage('Terraform Apply or Destroy') {
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-credentials') {
                    dir("${env.TF_DIR}") {
                        script {
                            if (params.ACTION == 'apply') {
                                sh '''
                                    echo "ðŸš€ Running terraform plan & apply..."
                                    terraform plan -out=tfplan
                                    terraform apply -auto-approve tfplan
                                '''
                            } else if (params.ACTION == 'destroy') {
                                sh '''
                                    echo "ðŸ”¥ Running terraform destroy..."
                                    terraform destroy -auto-approve
                                '''
                            }
                        }
                    }
                }
            }
        
        }

        stage('Show Terraform ECR Config') {
            steps {
                sh 'cat 70-ecr/main.tf || echo "main.tf not found"'
            }
        }

        
    }
       

    post {
        always {
            echo 'This will always run'     
            deleteDir()
        }
        success {
            echo 'This will run only if the pipeline is successful'
        }
        failure {
            echo 'This will run only if the pipeline fails'
        }
        unstable {
            echo 'This will run only if the pipeline is unstable'
        }
    }
}