pipeline {
    agent {
        label 'AGENT-1'
    }

    options {
        timeout(time: 40, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }

    parameters {
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Select Terraform action')
    }

    environment {
        AWS_REGION = 'us-east-1'
    }

    stages {
        stage('Init and Plan') {
            steps {
                withAWS(region: "${env.AWS_REGION}", credentials: 'aws-credentials') {
                    dir('20-bastion') {
                        sh '''
                        terraform init -reconfigure
                        terraform plan -out=tfplan
                        '''
                    }
                }
            }
        }

        stage('Apply or Destroy') {
            // input {
            //     message "Do you want to ${params.ACTION} the infrastructure?"
            //     ok 'Yes'
            // }
            steps {
                withAWS(region: "${env.AWS_REGION}", credentials: 'aws-credentials') {
                    dir('20-bastion') {
                        sh """
                        if [ ${params.ACTION} = 'apply' ]; then
                            terraform apply -auto-approve tfplan
                        elif [ ${params.ACTION} = 'destroy' ]; then
                            terraform destroy -auto-approve
                        fi
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning workspace...'
            deleteDir()
        }
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed.'
        }
        unstable {
            echo 'Pipeline marked as unstable.'
        }
    }
}
