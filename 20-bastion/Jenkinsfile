pipeline {
    agent {
        label 'AGENT-1'
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }

    parameters {
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Select Terraform action')
    }

    environment {
        AWS_REGION = 'us-east-1'
    }

    stages {
        stage('Init and Plan') {
            steps {
                withAWS(region: "${env.AWS_REGION}", credentials: 'aws-credentials') {
                    dir('20-bastion') {
                        sh '''
                        terraform init -reconfigure
                        terraform plan -out=tfplan
                        '''
                    }
                }
            }
        }

        stage('Apply or Destroy') {
            input {
                message "Do you want to ${params.ACTION} the infrastructure?"
                ok 'Yes'
            }
            steps {
                withAWS(region: "${env.AWS_REGION}", credentials: 'aws-credentials') {
                    dir('20-bastion') {
                        sh '''
                        if [ "${ACTION}" = "apply" ]; then
                            terraform apply -auto-approve tfplan
                        elif [ "${ACTION}" = "destroy" ]; then
                            terraform destroy -auto-approve
                        fi
                        '''
                    }
                }
            }
        }

        stage('Destroy VPC') {
            when {
                expression { params.ACTION == 'destroy' }
            }
            steps {
                build job: '00-vpc', parameters: [string(name: 'ACTION', value: 'destroy')], wait: false
            }
        }

        // Uncomment below block to build dependent jobs in parallel during apply
        /*
        stage('Provision Dependent Resources') {
            when {
                expression { params.ACTION == 'apply' }
            }
            parallel {
                stage('Bastion') {
                    steps {
                        build job: '20-bastion', parameters: [string(name: 'ACTION', value: 'apply')], wait: false
                    }
                }
                stage('EKS') {
                    steps {
                        build job: '40-eks', parameters: [string(name: 'ACTION', value: 'apply')], wait: false
                    }
                }
            }
        }
        */
    }

    post {
        always {
            echo 'Cleaning workspace...'
            deleteDir()
        }
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed.'
        }
        unstable {
            echo 'Pipeline marked as unstable.'
        }
    }
}
