pipeline {
    agent { label 'AGENT-1' }

    options {
        timeout(time: 40, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }

    parameters {
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Select Terraform action')
    }

    environment {
        AWS_REGION = 'us-east-1'
        AWS_CREDS  = 'aws-credentials'
        DIR        = '80-cdn'
    }

    stages {

        // ‚úÖ Put this at the top
        stage('Cert Setup') {
            steps {
                withAWS(region: "${env.AWS_REGION}", credentials: "${env.AWS_CREDS}") {
                    dir("${env.DIR}") {
                        sh 'chmod +x cert.sh && ./cert.sh'
                    }
                }
            }
        }

        stage('Init and Plan') {
            when { expression { params.ACTION == 'apply' } }
            steps {
                withAWS(region: "${env.AWS_REGION}", credentials: "${env.AWS_CREDS}") {
                    dir("${env.DIR}") {
                        sh '''
                            terraform init -reconfigure
                            terraform plan -out=tfplan
                        '''
                    }
                }
            }
        }

        stage('Apply') {
            when { expression { params.ACTION == 'apply' } }
            steps {
                withAWS(region: "${env.AWS_REGION}", credentials: "${env.AWS_CREDS}") {
                    dir("${env.DIR}") {
                        sh 'terraform apply -auto-approve tfplan'
                    }
                }
            }
        }

       stage('Destroy Dependencies') {
            when { expression { params.ACTION == 'destroy' } }
            steps {
                script {
                    def directories = ['80-cdn', '70-ecr', '60-ingress-alb', '50-acm', '40-eks', '30-rds', '20-bastion', '10-sg', '00-vpc']
                    for (dir in directories) {
                        echo "Destroying ${dir}..."
                        withAWS(region: "${env.AWS_REGION}", credentials: "${env.AWS_CREDS}") {
                            sh """
                                cd ${dir}
                                terraform init -reconfigure
                                terraform destroy -auto-approve || { echo '‚ö†Ô∏è Failed in ${dir}'; exit 1; }
                                cd ..
                            """
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'üßπ Cleaning workspace...'
            deleteDir()
        }
        success {
            echo '‚úÖ Pipeline successful.'
        }
        failure {
            echo '‚ùå Pipeline failed.'
        }
    }
}
