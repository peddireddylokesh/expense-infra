pipeline {
    agent {
        label 'AGENT-1'
    }

    options {
        timeout(time: 40, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }

    parameters {
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Select Terraform action')
    }

    environment {
        AWS_REGION = 'us-east-1'
        AWS_CREDS = 'aws-credentials'
        DIR = '80-cdn'
    }

    stages {

        stage('Init and Plan') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                withAWS(region: "${env.AWS_REGION}", credentials: "${env.AWS_CREDS}") {
                    dir("${env.DIR}") {
                        sh '''
                            terraform init -reconfigure
                            terraform plan -out=tfplan
                        '''
                    }
                }
            }
        }

        stage('Apply') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                withAWS(region: "${env.AWS_REGION}", credentials: "${env.AWS_CREDS}") {
                    dir("${env.DIR}") {
                        sh '''
                            terraform apply -auto-approve tfplan
                        '''
                    }
                }
            }
        }

        // stage('Destroy Self (CDN)') {
        //     when {
        //         expression { params.ACTION == 'destroy' }
        //     }
        //     steps {
        //         withAWS(region: "${env.AWS_REGION}", credentials: "${env.AWS_CREDS}") {
        //             dir("${env.DIR}") {
        //                 sh '''
        //                 terraform init -reconfigure
        //                 terraform destroy -auto-approve
        //                 '''
        //             }
        //         }
        //     }
        // }

        stage('Destroy Dependencies') {
            when {
                expression { params.ACTION == 'destroy' }
            }
            steps {
                echo 'Triggering destroy in reverse dependency order...'
                script {
                    def directories = [
                        '80-cdn',
                        '50-ecr',
                        '70-ingress-alb',
                        '60-acm',
                        '40-eks',
                        '40-rds',
                        '20-bastion',
                        '10-sg',
                        '00-vpc'
                    ]
                    for (dir in directories) {
                        echo "Destroying resources in directory: ${dir}"
                        sh """
                            cd ${dir}
                            terraform init -reconfigure
                            terraform destroy -auto-approve || { echo "Failed to destroy resources in ${dir}"; exit 1; }
                            cd ..
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning workspace...'
            deleteDir()
        }
        success {
            echo '✅ Pipeline completed successfully.'
        }
        failure {
            echo '❌ Pipeline failed.'
        }
        unstable {
            echo '⚠️ Pipeline is unstable.'
        }
    }
}
